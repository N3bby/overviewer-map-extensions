plugins {
    id "fabric-loom" version "1.6-SNAPSHOT"
    id "maven-publish"
    id "org.jetbrains.kotlin.jvm" version "2.0.0"
    id "org.jetbrains.kotlin.plugin.serialization" version "2.0.0"
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

configurations {
    transitiveInclude {
        exclude group: 'com.mojang'
        exclude group: 'org.jetbrains.kotlin'
        exclude group: 'org.jetbrains.kotlinx'
    }
}


dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

    // RxJava
    transitiveInclude(implementation("io.reactivex.rxjava3:rxjava:3.1.8"))

    // Ktor
    transitiveInclude(implementation("io.ktor:ktor-server-core:${project.ktor}"))
    transitiveInclude(implementation("io.ktor:ktor-server-cio:${project.ktor}"))
    transitiveInclude(implementation("io.ktor:ktor-server-content-negotiation:${project.ktor}"))
    transitiveInclude(implementation("io.ktor:ktor-serialization-kotlinx-json:${project.ktor}"))
    transitiveInclude(implementation("io.ktor:ktor-server-websockets:${project.ktor}"))

    configurations.transitiveInclude.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        include artifact.moduleVersion.id.toString()
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = 21
    }
}

java {
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}